pub mod backup;
pub mod control;
pub mod create;
pub mod credentials;
pub mod destroy;
pub mod link;
pub mod reset_password;
pub mod resize;
pub mod revert;
pub mod status;
pub mod unlink;
pub mod upgrade;

#[cfg(doc)]
use crate::branding::BRANDING;
use crate::options::Options;
use crate::portable::options::InstanceName;
use crate::portable::windows;

pub fn run(cmd: &Command, options: &Options) -> Result<(), anyhow::Error> {
    use Subcommands::*;

    match &cmd.subcommand {
        Create(c) => create::create(c, options),
        Destroy(c) => destroy::destroy(c, options),
        ResetPassword(c) => reset_password::reset_password(c),
        Link(c) => link::link(c, options),
        List(c) if cfg!(windows) => windows::list(c, options),
        List(c) => status::list(c, options),
        Resize(c) => resize::resize(c, options),
        Backup(c) => backup::backup(c, options),
        Restore(c) => backup::restore(c, options),
        ListBackups(c) => backup::list(c, options),
        Upgrade(c) => upgrade::upgrade(c, options),
        Start(c) => control::start(c),
        Stop(c) => control::stop(c),
        Restart(c) if cfg!(windows) => windows::restart(c),
        Restart(c) => control::restart(c, options),
        Logs(c) if cfg!(windows) => windows::logs(c),
        Logs(c) => control::logs(c),
        Revert(c) => revert::revert(c),
        Unlink(c) => unlink::unlink(c),
        Status(c) if cfg!(windows) => windows::status(c),
        Status(c) => status::status(c, options),
        Credentials(c) => credentials::show_credentials(options, c),
    }
}

#[derive(clap::Args, Debug, Clone)]
#[command(version = "help_expand")]
#[command(disable_version_flag = true)]
pub struct Command {
    #[command(subcommand)]
    pub subcommand: Subcommands,

    /// Name of the instance
    #[arg(short = 'I', long)]
    #[arg(value_hint=clap::ValueHint::Other)] // TODO complete instance name
    #[arg(global = true)]
    pub instance: Option<InstanceName>,
}

#[derive(clap::Subcommand, Clone, Debug)]
pub enum Subcommands {
    /// Initialize a new [`BRANDING`] instance.
    Create(create::Command),
    /// Show all instances.
    List(status::List),
    /// Show status of an instance.
    Status(status::Status),
    /// Start an instance.
    Start(control::Start),
    /// Stop an instance.
    Stop(control::Stop),
    /// Restart an instance.
    Restart(control::Restart),
    /// Destroy an instance and remove the data.
    Destroy(destroy::Command),
    /// Link to a remote [`BRANDING`] instance.
    #[command(
        long_about = "Link to a remote [`BRANDING`] instance and assign an instance name to simplify future connections."
    )]
    Link(link::Link),
    /// Unlink from a remote [`BRANDING`] instance.
    Unlink(unlink::Command),
    /// Show logs for an instance.
    Logs(control::Logs),
    /// Resize an instance ([`BRANDING_CLOUD`] only).
    Resize(resize::Command),
    /// Create a backup for an instance ([`BRANDING_CLOUD`] only).
    Backup(backup::Backup),
    /// Restore an instance from a backup ([`BRANDING_CLOUD`] only).
    Restore(backup::Restore),
    /// Restore an instance from a backup ([`BRANDING_CLOUD`] only).
    ListBackups(backup::ListBackups),
    /// Upgrade installations and instances.
    Upgrade(upgrade::Command),
    /// Revert a major instance upgrade.
    Revert(revert::Command),
    /// Generate new password for instance user (randomly generated by default).
    ResetPassword(reset_password::Args),
    /// Display instance credentials (add `--json` for verbose).
    Credentials(credentials::Command),
}
