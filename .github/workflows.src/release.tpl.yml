name: Build, Test, and Publish a Release

on:
  workflow_dispatch:
    inputs: {}

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.whichver.outputs.branch }}
    steps:
    - uses: actions/checkout@v2

    - name: Determine package version
      shell: bash
      run: |
        branch=${GITHUB_REF#refs/heads/}
        echo ::set-output name=branch::"${branch}"
      id: whichver

<% for tgt in targets.linux %>
  build-<< tgt.name >>:
    runs-on: << tgt.runs_on if tgt.runs_on else "ubuntu-latest" >>
    needs: prep

    steps:
    - uses: actions/checkout@v1
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-cli/edgedb-pkg

    - name: Build
      uses: edgedb/edgedb-pkg/integration/linux/build/<< tgt.platform >><< "{}".format(tgt.platform_libc) if tgt.platform_libc >><< "-{}".format(tgt.platform_version) if tgt.platform_version >>@master
      env:
        SRC_REF: "${{ needs.prep.outputs.branch }}"
        BUILD_IS_RELEASE: "true"
        PKG_REVISION: "<current-date>"
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PACKAGE: edgedbpkg.edgedbcli:EdgeDBCLI
        EXTRA_OPTIMIZATIONS: "true"
<% if tgt.family == "generic" %>
        BUILD_GENERIC: true
<% endif %>
<% if tgt.platform_libc %>
        PKG_PLATFORM_LIBC: "<< tgt.platform_libc >>"
<% endif %>

    - uses: actions/upload-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<<tgt.platform>><< "{}".format(tgt.platform_libc) if tgt.platform_libc >><< "-{}".format(tgt.platform_version) if tgt.platform_version >>
<% endfor %>
<% for tgt in targets.macos %>
  build-<< tgt.name >>:
    runs-on: << tgt.runs_on if tgt.runs_on else "macos-latest" >>
    needs: prep

    steps:
    - uses: actions/checkout@v1
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-cli/edgedb-pkg

    - name: Determine package version
      run: edgedb-pkg/integration/determine-version.py $GITHUB_REF
      id: whichver

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      if: << 'false' if tgt.runs_on and 'self-hosted' in tgt.runs_on else 'true' >>
      with:
        profile: minimal
        toolchain: stable
        default: true

    - name: Build
      env:
        SRC_REF: "${{ needs.prep.outputs.branch }}"
        BUILD_IS_RELEASE: "true"
        PKG_REVISION: "<current-date>"
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PACKAGE: edgedbpkg.edgedbcli:EdgeDBCLI
<% if tgt.family == "generic" %>
        BUILD_GENERIC: true
<% endif %>
      run: |
        edgedb-pkg/integration/macos/build.sh

    - uses: actions/upload-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<<tgt.platform>><< "-{}".format(tgt.platform_version) if tgt.platform_version >>
<% endfor %>
<% for tgt in targets.win %>
  build-<< tgt.name >>:
    runs-on: windows-2019
    needs: prep

    steps:
    - uses: actions/checkout@v1
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-cli/edgedb-pkg

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Configure Pagefile
      uses: elprans/configure-pagefile-action@v2
      with:
        minimum-size: 8GB

    - name: Build
      env:
        SRC_REF: "${{ needs.prep.outputs.branch }}"
        BUILD_IS_RELEASE: "true"
        PKG_REVISION: "<current-date>"
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PACKAGE: edgedbpkg.edgedbcli:EdgeDBCLI
<% if tgt.family == "generic" %>
        BUILD_GENERIC: true
<% endif %>
      shell: bash
      run: |
        edgedb-pkg/integration/win/build.sh

    - name: Set up VC tools environment
      uses: elprans/gha-setup-vcpp-build-tools@v1

    - name: Sign
      uses: elprans/gha-win-code-sign@v1
      with:
        certificate: "${{ secrets.WIN_CODE_SIGNING_CERT }}"
        certificate-password: "${{ secrets.WIN_CODE_SIGNING_CERT_PASSWORD }}"
        folder: artifacts/<<tgt.platform>><< "-{}".format(tgt.platform_version) if tgt.platform_version >>

    - uses: actions/upload-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<<tgt.platform>><< "-{}".format(tgt.platform_version) if tgt.platform_version >>
<% endfor %>
<% for tgt in targets.linux %>
  publish-<< tgt.name >>:
    needs: [build-<< tgt.name >>]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<<tgt.platform>><< "{}".format(tgt.platform_libc) if tgt.platform_libc >><< "-{}".format(tgt.platform_version) if tgt.platform_version >>

    - name: Describe
      id: describe
      uses: edgedb/edgedb-pkg/integration/actions/describe-artifact@master
      with:
        target: <<tgt.platform>><< "{}".format(tgt.platform_libc) if tgt.platform_libc >><< "-{}".format(tgt.platform_version) if tgt.platform_version >>

    - name: Publish
      uses: edgedb/edgedb-pkg/integration/linux/upload/linux-x86_64@master
      env:
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_VERSION_SLOT: "${{ steps.describe.outputs.version-slot }}"
        PACKAGE_UPLOAD_SSH_KEY: "${{ secrets.PACKAGE_UPLOAD_SSH_KEY }}"
<% if tgt.family == "generic" %>
    - name: Prepare docker context
      env:
        CLI_EXECUTABLE: "${{ steps.describe.outputs.install-ref }}"
        PKG_PLATFORM_FULL: "<<tgt.platform>><< "{}".format(tgt.platform_libc) if tgt.platform_libc >><< "-{}".format(tgt.platform_version) if tgt.platform_version >>"
      run: |
        set -ex -o pipefail
        shopt -s dotglob inherit_errexit nullglob
        mkdir -p tmp
        mkdir -p dockerctx
        cp artifacts/${PKG_PLATFORM_FULL}/*.tar tmp/cli.tar
        tar -x -f tmp/cli.tar -C tmp/
        cp "tmp/${CLI_EXECUTABLE}" dockerctx/edgedb
        chmod +x dockerctx/edgedb
        printf 'FROM scratch\nADD edgedb /usr/bin/\nENTRYPOINT ["/usr/bin/edgedb"]\n' \
          >dockerctx/Dockerfile

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Publish docker image
      uses: docker/build-push-action@v2
      env:
        PKG_PLATFORM_FULL: "<<tgt.platform>><< "{}".format(tgt.platform_libc) if tgt.platform_libc >><< "-{}".format(tgt.platform_version) if tgt.platform_version >>"
      with:
        push: true
        context: dockerctx
        tags: |
          edgedb/edgedb-cli:${{ env.PKG_PLATFORM_FULL }}-latest
          edgedb/edgedb-cli:${{ env.PKG_PLATFORM_FULL }}-${{ steps.describe.outputs.version-core }}

    - name: Update docker manifest
      env:
        PKG_PLATFORM_FULL: "<<tgt.platform>><< "{}".format(tgt.platform_libc) if tgt.platform_libc >><< "-{}".format(tgt.platform_version) if tgt.platform_version >>"
        PKG_PLATFORM_VERSION: "<<tgt.platform_version>>"
      run: |
        if docker manifest inspect edgedb/edgedb-cli:latest >/dev/null 2>&1; then
          docker manifest create --amend \
            edgedb/edgedb-cli:latest \
            edgedb/edgedb-cli:${{ env.PKG_PLATFORM_FULL }}-latest
        else
          docker manifest create \
            edgedb/edgedb-cli:latest \
            edgedb/edgedb-cli:${{ env.PKG_PLATFORM_FULL }}-latest
        fi
        docker manifest push edgedb/edgedb-cli:latest
<% endif %>
<% endfor %>
<% for tgt in targets.macos %>
  publish-<< tgt.name >>:
    needs: [build-<< tgt.name >>]
    continue-on-error: true
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<<tgt.platform>><< "-{}".format(tgt.platform_version) if tgt.platform_version >>

    - uses: actions/checkout@v1
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-cli/edgedb-pkg

    - name: Describe
      id: describe
      uses: edgedb/edgedb-pkg/integration/actions/describe-artifact@master
      with:
        target: <<tgt.platform>><< "-{}".format(tgt.platform_version) if tgt.platform_version >>

    - name: Publish
      uses: edgedb/edgedb-pkg/integration/linux/upload/linux-x86_64@master
      env:
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_VERSION_SLOT: "${{ steps.describe.outputs.version-slot }}"
        PACKAGE_UPLOAD_SSH_KEY: "${{ secrets.PACKAGE_UPLOAD_SSH_KEY }}"
<% endfor %>
<% for tgt in targets.win %>
  publish-<< tgt.name >>:
    needs: [build-<< tgt.name >>]
    runs-on: windows-2019

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<<tgt.platform>><< "-{}".format(tgt.platform_version) if tgt.platform_version >>

    - uses: actions/checkout@v1
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-cli/edgedb-pkg

    - name: Describe
      id: describe
      uses: edgedb/edgedb-pkg/integration/actions/describe-artifact@master
      with:
        target: <<tgt.platform>><< "-{}".format(tgt.platform_version) if tgt.platform_version >>

    - name: Publish
      env:
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_VERSION_SLOT: "${{ steps.describe.outputs.version-slot }}"
        PACKAGE_UPLOAD_SSH_KEY: "${{ secrets.PACKAGE_UPLOAD_SSH_KEY }}"
      shell: bash
      run: |
        edgedb-pkg/integration/win/publish.sh
<% endfor %>
