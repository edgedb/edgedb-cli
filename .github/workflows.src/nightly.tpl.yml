name: Build Test and Publish Nightly Packages

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs: {}
  push:
    branches:
      - nightly

jobs:
<% for tgt in targets.linux %>
  build-<< tgt.name >>:
    runs-on: ubuntu-latest

    steps:
    - name: Build
      uses: edgedb/edgedb-pkg/integration/linux/build/<< tgt.platform >><< "-{}".format(tgt.platform_version) if tgt.platform_version >>@master
      env:
        PKG_REVISION: "<current-date>"
        PKG_SUBDIST: "nightly"
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PACKAGE: edgedbpkg.edgedbcli:EdgeDBCLI
        EXTRA_OPTIMIZATIONS: "true"
<% if tgt.family == "generic" %>
        BUILD_GENERIC: true
<% endif %>

    - uses: actions/upload-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< tgt.name >>
<% endfor %>
<% for tgt in targets.macos %>
  build-<< tgt.name >>:
    runs-on: macos-latest
    continue-on-error: true

    steps:
    - uses: actions/checkout@v1
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-cli/edgedb-pkg

    - uses: actions/cache@v2
      id: sdk1010cache
      with:
        path: ~/.cache/MacOSX10.10.sdk/
        key: MacOSX10.10.sdk

    - name: Install Xcode
      if: steps.sdk1010cache.outputs.cache-hit != 'true'
      env:
        XCODE_INSTALL_USER: github-ci@edgedb.com
        XCODE_INSTALL_PASSWORD: ${{ secrets.BOT_APPLE_ID_PASSWORD }}
      run: |
        xcversion install 6.4

    - name: Cache 10.10 SDK
      if: steps.sdk1010cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/.cache
        cp -a \
          /Applications/Xcode-6.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/ \
          ~/.cache/MacOSX10.10.sdk/

    - name: Select macOS SDK
      run: |
        sudo cp -a \
          ~/.cache/MacOSX10.10.sdk/ \
          /Library/Developer/CommandLineTools/SDKs/MacOSX10.10.sdk/
        sudo xcode-select -s /Library/Developer/CommandLineTools

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Build
      env:
        PKG_REVISION: "<current-date>"
        PKG_SUBDIST: "nightly"
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX10.10.sdk/
        PACKAGE: edgedbpkg.edgedbcli:EdgeDBCLI
<% if tgt.family == "generic" %>
        BUILD_GENERIC: true
<% endif %>
      run: |
        xcrun --show-sdk-path
        edgedb-pkg/integration/macos/build.sh

    - uses: actions/upload-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< tgt.name >>
<% endfor %>
<% for tgt in targets.win %>
  build-<< tgt.name >>:
    runs-on: windows-latest
    continue-on-error: true

    steps:
    - uses: actions/checkout@v1
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-cli/edgedb-pkg

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Build
      env:
        PKG_REVISION: "<current-date>"
        PKG_SUBDIST: "nightly"
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PACKAGE: edgedbpkg.edgedbcli:EdgeDBCLI
<% if tgt.family == "generic" %>
        BUILD_GENERIC: true
<% endif %>
      shell: bash
      run: |
        edgedb-pkg/integration/win/build.sh

    - name: Set up VC tools environment
      uses: elprans/gha-setup-vcpp-build-tools@v1

    - name: Sign
      uses: elprans/gha-win-code-sign@v1
      with:
        certificate: "${{ secrets.WIN_CODE_SIGNING_CERT }}"
        certificate-password: "${{ secrets.WIN_CODE_SIGNING_CERT_PASSWORD }}"
        folder: artifacts/<< tgt.name >>

    - uses: actions/upload-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< tgt.name >>
<% endfor %>
<% for tgt in targets.linux %>
  publish-<< tgt.name >>:
    needs: [build-<< tgt.name >>]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< tgt.name >>

    - name: Describe
      id: describe
      uses: edgedb/edgedb-pkg/integration/actions/describe-artifact@master
      with:
        target: << tgt.name >>

    - name: Publish
      uses: edgedb/edgedb-pkg/integration/linux/upload/<< tgt.platform >><< "-{}".format(tgt.platform_version) if tgt.platform_version >>@master
      env:
        PKG_SUBDIST: "nightly"
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_VERSION_SLOT: "${{ steps.describe.outputs.version-slot }}"
        PACKAGE_UPLOAD_SSH_KEY: "${{ secrets.PACKAGE_UPLOAD_SSH_KEY }}"
<% if tgt.family == "generic" %>
    - name: Prepare docker context
      run: |
        mkdir -p dockerctx
        cp artifacts/<< tgt.name >>/edgedb-cli* dockerctx/edgedb
        chmod +x dockerctx/edgedb
        printf 'FROM scratch\nENV EDGEDB_USER edgedb\nADD edgedb /usr/bin/\nENTRYPOINT ["/usr/bin/edgedb"]\n' \
          >dockerctx/Dockerfile
        tag=$(date +%Y%m%d%H%M%S)$(echo "${GITHUB_SHA}" | cut -c1-6)
        echo "SNAPSHOT_TAG=${tag}" >> $GITHUB_ENV

    - name: Publish docker image
      uses: elgohr/Publish-Docker-Github-Action@2.19
      env:
        PKG_PLATFORM_FULL: "<<tgt.platform>><< "-{}".format(tgt.platform_version) if tgt.platform_version >>"
      with:
        name: edgedb/edgedb-cli
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        workdir: dockerctx
        tags: "${{ env.PKG_PLATFORM_FULL }}-nightly,${{ env.PKG_PLATFORM_FULL }}-nightly-${{ env.SNAPSHOT_TAG }}"
<% endif %>
<% endfor %>
<% for tgt in targets.macos %>
  publish-<< tgt.name >>:
    needs: [build-<< tgt.name >>]
    runs-on: macos-latest

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< tgt.name >>

    - uses: actions/checkout@v1
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-cli/edgedb-pkg

    - name: Describe
      id: describe
      uses: edgedb/edgedb-pkg/integration/actions/describe-artifact@master
      with:
        target: << tgt.name >>

    - name: Publish
      env:
        PKG_SUBDIST: "nightly"
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_VERSION_SLOT: "${{ steps.describe.outputs.version-slot }}"
        PACKAGE_UPLOAD_SSH_KEY: "${{ secrets.PACKAGE_UPLOAD_SSH_KEY }}"
      run: |
        edgedb-pkg/integration/macos/publish.sh
<% endfor %>
<% for tgt in targets.win %>
  publish-<< tgt.name >>:
    needs: [build-<< tgt.name >>]
    runs-on: windows-latest

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: builds-<< tgt.name >>
        path: artifacts/<< tgt.name >>

    - uses: actions/checkout@v1
      with:
        repository: edgedb/edgedb-pkg
        ref: master
        path: edgedb-cli/edgedb-pkg

    - name: Describe
      id: describe
      uses: edgedb/edgedb-pkg/integration/actions/describe-artifact@master
      with:
        target: << tgt.name >>

    - name: Publish
      env:
        PKG_SUBDIST: "nightly"
        PKG_PLATFORM: "<< tgt.platform >>"
        PKG_PLATFORM_VERSION: "<< tgt.platform_version >>"
        PKG_VERSION_SLOT: "${{ steps.describe.outputs.version-slot }}"
        PACKAGE_UPLOAD_SSH_KEY: "${{ secrets.PACKAGE_UPLOAD_SSH_KEY }}"
      shell: bash
      run: |
        edgedb-pkg/integration/win/publish.sh
<% endfor %>
